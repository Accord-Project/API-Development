# generated by fastapi-codegen:
#   filename:  Results.yaml
#   timestamp: 2024-05-23T13:10:53+00:00

from __future__ import annotations

from typing import Optional, Union
from uuid import UUID, uuid4

from fastapi import FastAPI, Header, Path, HTTPException

from models import (
    CheckCreate,
    CheckCreateSpecific,
    CheckJobID,
    CheckStatus,
    Identity,
    ResponseJSON,
)

from implementation import (
    GetIdentity,
    ExecuteComplianceCheck,
    ExecuteComplianceCheckSpecific,
)

import concurrent.futures

import asyncio 
from aiocache import RedisCache


app = FastAPI(
    title='ACCORD Results API',
    description="This is the Results API proposed as part of the ACCORD project version: '1.0.0'. It is designed to be implemented by compliance checking microservices to allow interface between the ACCORD cloud architecture and the compliance checking microservices.",
    version='1',
    servers=[{'url': '/api/v1/'}],
)

app.state.threadPool = concurrent.futures.ThreadPoolExecutor()
app.state.cache = {}

@app.get('/', response_model=Identity)
def get() -> Identity:
   return GetIdentity()


@app.put(
    '/',
    response_model=None,
    responses={'201': {'model': CheckJobID}},
)
def put(body: CheckCreate) -> Optional[CheckJobID]:
    uuid = uuid4()
    app.state.cache[uuid]=app.state.threadPool.submit(ExecuteComplianceCheck, body)
    return CheckJobID(CheckJobID=uuid)


@app.get('/{CheckJobID}/bcf', response_model=None)
def bcfResult(
    check_job_id: UUID = Path(..., alias='CheckJobID'),
    accept_language: Optional[str] = Header(None, alias='Accept-Language'),
) -> None:
    raise HTTPException(status_code=204)


@app.get('/{CheckJobID}/result', response_model=ResponseJSON)
def getResult(
    check_job_id: UUID = Path(..., alias='CheckJobID'),
    accept_language: Optional[str] = Header(None, alias='Accept-Language'),
) -> ResponseJSON:
    if check_job_id in app.state.cache.keys():
        if app.state.cache.get(check_job_id).done():
            return app.state.cache.get(check_job_id).result()
        else:
            raise HTTPException(status_code=503)
    else:
        raise HTTPException(status_code=404)

@app.get('/{CheckJobID}/status', response_model=CheckStatus)
def getStatus(check_job_id: UUID = Path(..., alias='CheckJobID')) -> CheckStatus:
    if check_job_id in app.state.cache.keys():
        return CheckStatus(complete=app.state.cache.get(check_job_id).done())
    else:
        raise HTTPException(status_code=404)
    
@app.put(
    '/{ComplianceCheckName}',
    response_model=None,
    responses={'201': {'model': CheckJobID}},
)
def putSpecific(
    compliance_check_name: str = Path(..., alias='ComplianceCheckName'),
    body: CheckCreateSpecific = ...,
) -> Optional[CheckJobID]:
    uuid = uuid4()
    body.complianceCheckName = compliance_check_name
    app.state.cache[uuid]=app.state.threadPool.submit(ExecuteComplianceCheckSpecific, body)
    return CheckJobID(CheckJobID=uuid)
